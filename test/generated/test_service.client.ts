// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "test_service.proto" (package "test_service", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MyServerService } from "./test_service";
import type { MyRequestResult } from "./test_service";
import type { MyRequestInput } from "./test_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SubscriptionItem } from "./test_service";
import type { EmptyInput } from "./test_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service test_service.MyServerService
 */
export interface IMyServerServiceClient {
    /**
     * @generated from protobuf rpc: SubscribeToItems(test_service.EmptyInput) returns (stream test_service.SubscriptionItem);
     */
    subscribeToItems(input: EmptyInput, options?: RpcOptions): ServerStreamingCall<EmptyInput, SubscriptionItem>;
    /**
     * @generated from protobuf rpc: MyRequestMethod(test_service.MyRequestInput) returns (test_service.MyRequestResult);
     */
    myRequestMethod(input: MyRequestInput, options?: RpcOptions): UnaryCall<MyRequestInput, MyRequestResult>;
}
/**
 * @generated from protobuf service test_service.MyServerService
 */
export class MyServerServiceClient implements IMyServerServiceClient, ServiceInfo {
    typeName = MyServerService.typeName;
    methods = MyServerService.methods;
    options = MyServerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SubscribeToItems(test_service.EmptyInput) returns (stream test_service.SubscriptionItem);
     */
    subscribeToItems(input: EmptyInput, options?: RpcOptions): ServerStreamingCall<EmptyInput, SubscriptionItem> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyInput, SubscriptionItem>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MyRequestMethod(test_service.MyRequestInput) returns (test_service.MyRequestResult);
     */
    myRequestMethod(input: MyRequestInput, options?: RpcOptions): UnaryCall<MyRequestInput, MyRequestResult> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MyRequestInput, MyRequestResult>("unary", this._transport, method, opt, input);
    }
}
