// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "test_service.proto" (package "test_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * ====== SUBSCRIPTION DEFINITIONS ======
 *
 * @generated from protobuf message test_service.EmptyInput
 */
export interface EmptyInput {
}
/**
 * @generated from protobuf message test_service.SubscriptionItem
 */
export interface SubscriptionItem {
    /**
     * @generated from protobuf field: string data = 1;
     */
    data: string;
}
/**
 * ====== REQUEST DEFINITIONS ======
 *
 * @generated from protobuf message test_service.MyRequestInput
 */
export interface MyRequestInput {
    /**
     * @generated from protobuf field: int32 time_to_sleep = 1;
     */
    timeToSleep: number;
}
/**
 * @generated from protobuf message test_service.MyRequestResult
 */
export interface MyRequestResult {
    /**
     * @generated from protobuf field: bool all_ok = 1;
     */
    allOk: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class EmptyInput$Type extends MessageType<EmptyInput> {
    constructor() {
        super("test_service.EmptyInput", []);
    }
    create(value?: PartialMessage<EmptyInput>): EmptyInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EmptyInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmptyInput): EmptyInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EmptyInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_service.EmptyInput
 */
export const EmptyInput = new EmptyInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionItem$Type extends MessageType<SubscriptionItem> {
    constructor() {
        super("test_service.SubscriptionItem", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscriptionItem>): SubscriptionItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = "";
        if (value !== undefined)
            reflectionMergePartial<SubscriptionItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionItem): SubscriptionItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data */ 1:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data = 1; */
        if (message.data !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_service.SubscriptionItem
 */
export const SubscriptionItem = new SubscriptionItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MyRequestInput$Type extends MessageType<MyRequestInput> {
    constructor() {
        super("test_service.MyRequestInput", [
            { no: 1, name: "time_to_sleep", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MyRequestInput>): MyRequestInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timeToSleep = 0;
        if (value !== undefined)
            reflectionMergePartial<MyRequestInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MyRequestInput): MyRequestInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 time_to_sleep */ 1:
                    message.timeToSleep = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MyRequestInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 time_to_sleep = 1; */
        if (message.timeToSleep !== 0)
            writer.tag(1, WireType.Varint).int32(message.timeToSleep);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_service.MyRequestInput
 */
export const MyRequestInput = new MyRequestInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MyRequestResult$Type extends MessageType<MyRequestResult> {
    constructor() {
        super("test_service.MyRequestResult", [
            { no: 1, name: "all_ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MyRequestResult>): MyRequestResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.allOk = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<MyRequestResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MyRequestResult): MyRequestResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool all_ok */ 1:
                    message.allOk = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MyRequestResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool all_ok = 1; */
        if (message.allOk !== false)
            writer.tag(1, WireType.Varint).bool(message.allOk);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_service.MyRequestResult
 */
export const MyRequestResult = new MyRequestResult$Type();
/**
 * @generated ServiceType for protobuf service test_service.MyServerService
 */
export const MyServerService = new ServiceType("test_service.MyServerService", [
    { name: "SubscribeToItems", serverStreaming: true, options: { "test_service.zmq_type": "sub" }, I: EmptyInput, O: SubscriptionItem },
    { name: "MyRequestMethod", options: { "test_service.zmq_type": "reply" }, I: MyRequestInput, O: MyRequestResult }
]);
